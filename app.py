# app.py

from flask import Flask, request, render_template_string
from linebot import LineBotApi, WebhookHandler
from linebot.models import MessageEvent, TextMessage, TextSendMessage
from dotenv import load_dotenv
import os
import random
import json
import requests
import traceback
from datetime import datetime, timedelta
import pytz

# --- ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£ import ‡πÑ‡∏•‡∏ö‡∏£‡∏≤‡∏£‡∏µ‡πÅ‡∏•‡∏∞‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÉ‡∏´‡∏°‡πà ---
from apscheduler.schedulers.background import BackgroundScheduler
from utils import (
    create_tables, save_chat, get_session, save_session, clear_session,
    get_chat_history, get_slip_summary_by_day, get_slip_summary_by_month,
    # --- ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ü‡∏µ‡πÄ‡∏à‡∏≠‡∏£‡πå‡πÉ‡∏´‡∏°‡πà ---
    get_user_profile, update_user_profile, create_reminder,
    get_due_reminders, delete_reminder
)

# ‡πÇ‡∏´‡∏•‡∏î‡∏Ñ‡πà‡∏≤‡∏à‡∏≤‡∏Å‡πÑ‡∏ü‡∏•‡πå .env
load_dotenv()

# --- ‡∏î‡∏∂‡∏á‡∏Ñ‡πà‡∏≤‡∏à‡∏≤‡∏Å Environment Variables ---
LINE_CHANNEL_ACCESS_TOKEN = os.getenv("LINE_CHANNEL_ACCESS_TOKEN")
LINE_CHANNEL_SECRET = os.getenv("LINE_CHANNEL_SECRET")
GEMINI_API_KEY = os.getenv("GEMINI_API_KEY")

if not all([LINE_CHANNEL_ACCESS_TOKEN, LINE_CHANNEL_SECRET, GEMINI_API_KEY]):
    raise ValueError("Missing required environment variables (LINE, GEMINI).")

line_bot_api = LineBotApi(LINE_CHANNEL_ACCESS_TOKEN)
handler = WebhookHandler(LINE_CHANNEL_SECRET)
app = Flask(__name__)

# --- ‡∏Å‡∏≥‡∏´‡∏ô‡∏î Timezone ---
bangkok_tz = pytz.timezone('Asia/Bangkok')

# --- ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• ---
try:
    print("Initializing database...")
    create_tables()
except Exception as e:
    print(f"FATAL: Could not connect to database and create tables: {e}")
    raise e

# =======================================================
# START: ‡∏£‡∏∞‡∏ö‡∏ö‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÄ‡∏ö‡∏∑‡πâ‡∏≠‡∏á‡∏´‡∏•‡∏±‡∏á (Background Scheduler)
# =======================================================
def send_notifications():
    """
    ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ô‡∏µ‡πâ‡∏à‡∏∞‡∏ñ‡∏π‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÇ‡∏î‡∏¢ Scheduler ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÅ‡∏•‡∏∞‡∏™‡πà‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô
    """
    with app.app_context(): # ‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á app context ‡∏†‡∏≤‡∏¢‡∏ô‡∏≠‡∏Å request
        print(f"[{datetime.now(bangkok_tz).strftime('%Y-%m-%d %H:%M:%S')}] Running notification job...")
        reminders = get_due_reminders()
        if not reminders:
            return

        print(f"Found {len(reminders)} due reminders to send.")
        for r_id, user_id, message in reminders:
            try:
                reminder_text = f"‚è∞ ‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏Ñ‡∏ß‡∏≤‡∏°‡∏à‡∏≥:\n\n{message}"
                line_bot_api.push_message(
                    user_id,
                    TextSendMessage(text=reminder_text)
                )
                print(f"Successfully sent reminder ID {r_id} to user {user_id}")
                # ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏™‡πà‡∏á‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à ‡πÉ‡∏´‡πâ‡∏•‡∏ö‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
                delete_reminder(r_id)
            except Exception as e:
                print(f"ERROR: Could not send reminder ID {r_id} to user {user_id}. Reason: {e}")
                # ‡∏≠‡∏≤‡∏à‡∏à‡∏∞‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï status ‡πÄ‡∏õ‡πá‡∏ô 'error' ‡πÅ‡∏ó‡∏ô‡∏Å‡∏≤‡∏£‡∏•‡∏ö‡∏Å‡πá‡πÑ‡∏î‡πâ

# --- ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÅ‡∏•‡∏∞‡πÄ‡∏£‡∏¥‡πà‡∏° Scheduler ---
scheduler = BackgroundScheduler(timezone=bangkok_tz)
scheduler.add_job(send_notifications, 'interval', minutes=1, id='notification_job')
scheduler.start()
print("Scheduler started successfully. Checking for reminders every minute.")
# =======================================================
# END: ‡∏£‡∏∞‡∏ö‡∏ö‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÄ‡∏ö‡∏∑‡πâ‡∏≠‡∏á‡∏´‡∏•‡∏±‡∏á
# =======================================================


emotions = ["üòä", "üòÑ", "ü§î", "üëç", "üôå", "üòâ", "‚ú®"]
MODEL_NAME = "gemini-1.5-flash"

def ask_gemini(user_id, user_text):
    # --- 1. ‡∏î‡∏∂‡∏á‡∏Ñ‡∏ß‡∏≤‡∏°‡∏à‡∏≥‡∏ñ‡∏≤‡∏ß‡∏£ (Profile) ---
    profile = get_user_profile(user_id)
    profile_prompt = ""
    if profile:
        # ‡πÅ‡∏õ‡∏•‡∏á dict ‡πÄ‡∏õ‡πá‡∏ô‡∏™‡∏ï‡∏£‡∏¥‡∏á‡∏ó‡∏µ‡πà AI ‡∏≠‡πà‡∏≤‡∏ô‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏à‡∏á‡πà‡∏≤‡∏¢
        profile_str = ", ".join([f"{key}‡∏Ñ‡∏∑‡∏≠{value}" for key, value in profile.items()])
        profile_prompt = f"‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Å‡∏±‡∏ö‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏Ñ‡∏ô‡∏ô‡∏µ‡πâ‡∏ó‡∏µ‡πà‡∏Ñ‡∏∏‡∏ì‡πÄ‡∏Ñ‡∏¢‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÑ‡∏ß‡πâ: {profile_str}. ‡πÉ‡∏ä‡πâ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ô‡∏µ‡πâ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ó‡∏≥‡πÉ‡∏´‡πâ‡∏Å‡∏≤‡∏£‡∏™‡∏ô‡∏ó‡∏ô‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡∏Å‡∏±‡∏ô‡πÄ‡∏≠‡∏á‡∏°‡∏≤‡∏Å‡∏Ç‡∏∂‡πâ‡∏ô"

    # --- 2. ‡∏™‡∏£‡πâ‡∏≤‡∏á Prompt ‡∏≠‡∏±‡∏à‡∏â‡∏£‡∏¥‡∏¢‡∏∞‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö AI ---
    system_instruction = {
        "role": "system",
        "parts": [{"text": f"""
            ‡∏Ñ‡∏∏‡∏ì‡∏Ñ‡∏∑‡∏≠‡∏ú‡∏π‡πâ‡∏ä‡πà‡∏ß‡∏¢ AI ‡∏™‡πà‡∏ß‡∏ô‡∏ï‡∏±‡∏ß‡∏ó‡∏µ‡πà‡∏â‡∏•‡∏≤‡∏î‡πÅ‡∏•‡∏∞‡πÄ‡∏õ‡πá‡∏ô‡∏°‡∏¥‡∏ï‡∏£ ‡∏ï‡∏≠‡∏ö‡πÄ‡∏õ‡πá‡∏ô‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢‡πÄ‡∏™‡∏°‡∏≠
            {profile_prompt}

            # ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏û‡∏¥‡πÄ‡∏®‡∏©‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì:
            1.  **‡∏Å‡∏≤‡∏£‡∏à‡∏î‡∏à‡∏≥‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡πà‡∏ß‡∏ô‡∏ï‡∏±‡∏ß**: ‡∏´‡∏≤‡∏Å‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ö‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Å‡∏±‡∏ö‡∏ï‡∏±‡∏ß‡πÄ‡∏≠‡∏á (‡πÄ‡∏ä‡πà‡∏ô ‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏•‡πà‡∏ô, ‡∏Ç‡∏≠‡∏á‡∏ó‡∏µ‡πà‡∏ä‡∏≠‡∏ö, ‡∏ß‡∏±‡∏ô‡πÄ‡∏Å‡∏¥‡∏î) ‡πÉ‡∏´‡πâ‡∏Ñ‡∏∏‡∏ì‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö‡∏ö‡∏ó‡∏™‡∏ô‡∏ó‡∏ô‡∏≤‡∏≠‡∏¢‡πà‡∏≤‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏ò‡∏£‡∏£‡∏°‡∏ä‡∏≤‡∏ï‡∏¥ ‡πÅ‡∏•‡∏∞ "‡∏ï‡πâ‡∏≠‡∏á" ‡∏ï‡πà‡∏≠‡∏ó‡πâ‡∏≤‡∏¢‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö‡∏î‡πâ‡∏ß‡∏¢‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏û‡∏¥‡πÄ‡∏®‡∏©‡πÉ‡∏ô‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏ô‡∏µ‡πâ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô: `[SAVE_PROFILE:{{"key":"value"}}]`
                - ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á: ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ö‡∏≠‡∏Å "‡∏â‡∏±‡∏ô‡∏ä‡∏≠‡∏ö‡∏Å‡∏¥‡∏ô‡∏Ç‡πâ‡∏≤‡∏ß‡∏°‡∏±‡∏ô‡πÑ‡∏Å‡πà" ‡∏Ñ‡∏∏‡∏ì‡∏ï‡πâ‡∏≠‡∏á‡∏ï‡∏≠‡∏ö‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì‡∏ß‡πà‡∏≤ "‡∏Ç‡πâ‡∏≤‡∏ß‡∏°‡∏±‡∏ô‡πÑ‡∏Å‡πà‡∏≠‡∏£‡πà‡∏≠‡∏¢‡∏à‡∏£‡∏¥‡∏á‡πÜ ‡∏Ñ‡πà‡∏∞ ‡πÄ‡∏î‡∏µ‡πã‡∏¢‡∏ß‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÑ‡∏ß‡πâ‡πÉ‡∏´‡πâ‡∏ô‡∏∞‡∏Ñ‡∏∞ [SAVE_PROFILE:{{"‡πÄ‡∏°‡∏ô‡∏π‡πÇ‡∏õ‡∏£‡∏î":"‡∏Ç‡πâ‡∏≤‡∏ß‡∏°‡∏±‡∏ô‡πÑ‡∏Å‡πà"}}]`

            2.  **‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô**: ‡∏´‡∏≤‡∏Å‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÉ‡∏´‡πâ "‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô" ‡∏´‡∏£‡∏∑‡∏≠ "‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô" ‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Å‡∏±‡∏ö‡∏≠‡∏∞‡πÑ‡∏£‡∏ö‡∏≤‡∏á‡∏≠‡∏¢‡πà‡∏≤‡∏á ‡πÉ‡∏´‡πâ‡∏Ñ‡∏∏‡∏ì‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ö‡∏≠‡∏Å (‡πÄ‡∏ä‡πà‡∏ô ‡∏û‡∏£‡∏∏‡πà‡∏á‡∏ô‡∏µ‡πâ, 5 ‡πÇ‡∏°‡∏á‡πÄ‡∏¢‡πá‡∏ô, ‡∏ß‡∏±‡∏ô‡∏®‡∏∏‡∏Å‡∏£‡πå) ‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡πá‡∏ô‡∏ß‡∏±‡∏ô‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡∏ä‡∏±‡∏î‡πÄ‡∏à‡∏ô‡πÉ‡∏ô‡∏≠‡∏ô‡∏≤‡∏Ñ‡∏ï‡πÄ‡∏™‡∏°‡∏≠ (‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö YYYY-MM-DD HH:MM:SS) ‡πÅ‡∏•‡∏∞ "‡∏ï‡πâ‡∏≠‡∏á" ‡∏ï‡πà‡∏≠‡∏ó‡πâ‡∏≤‡∏¢‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö‡∏î‡πâ‡∏ß‡∏¢‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏û‡∏¥‡πÄ‡∏®‡∏©‡∏ô‡∏µ‡πâ: `[SET_REMINDER:{{"time":"YYYY-MM-DD HH:MM:SS", "message":"‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô"}}]`
                - ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á: ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ö‡∏≠‡∏Å "‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏â‡∏±‡∏ô‡∏ï‡∏≠‡∏ô 6 ‡πÇ‡∏°‡∏á‡πÄ‡∏¢‡πá‡∏ô‡πÉ‡∏´‡πâ‡πÑ‡∏õ‡∏≠‡∏≠‡∏Å‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏Å‡∏≤‡∏¢" ‡πÅ‡∏•‡∏∞‡∏™‡∏°‡∏°‡∏ï‡∏¥‡∏ß‡πà‡∏≤‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ‡∏Ñ‡∏∑‡∏≠ 2025-07-12 ‡∏Ñ‡∏∏‡∏ì‡∏ï‡πâ‡∏≠‡∏á‡∏ï‡∏≠‡∏ö‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì‡∏ß‡πà‡∏≤ "‡πÑ‡∏î‡πâ‡πÄ‡∏•‡∏¢‡∏Ñ‡πà‡∏∞ 6 ‡πÇ‡∏°‡∏á‡πÄ‡∏¢‡πá‡∏ô‡∏à‡∏∞‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÉ‡∏´‡πâ‡∏ô‡∏∞‡∏Ñ‡∏∞ [SET_REMINDER:{{"time":"2025-07-12 18:00:00", "message":"‡πÑ‡∏õ‡∏≠‡∏≠‡∏Å‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏Å‡∏≤‡∏¢"}}]`
                - ‡∏ñ‡πâ‡∏≤‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ö‡∏≠‡∏Å "‡∏û‡∏£‡∏∏‡πà‡∏á‡∏ô‡∏µ‡πâ 9 ‡πÇ‡∏°‡∏á‡πÄ‡∏ä‡πâ‡∏≤" ‡∏Ñ‡∏∏‡∏ì‡∏ï‡πâ‡∏≠‡∏á‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏Ç‡∏≠‡∏á‡∏ß‡∏±‡∏ô‡∏û‡∏£‡∏∏‡πà‡∏á‡∏ô‡∏µ‡πâ‡πÉ‡∏´‡πâ‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á

            ‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç‡∏°‡∏≤‡∏Å: ‡∏´‡πâ‡∏≤‡∏°‡πÅ‡∏™‡∏î‡∏á Markdown ‡πÉ‡∏ô‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö‡πÄ‡∏î‡πá‡∏î‡∏Ç‡∏≤‡∏î ‡πÅ‡∏•‡∏∞‡∏´‡πâ‡∏≤‡∏°‡πÅ‡∏™‡∏î‡∏á‡∏™‡πà‡∏ß‡∏ô‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏û‡∏¥‡πÄ‡∏®‡∏©‡πÉ‡∏´‡πâ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÄ‡∏´‡πá‡∏ô‡πÉ‡∏ô‡πÅ‡∏ä‡∏ó‡∏õ‡∏Å‡∏ï‡∏¥
        """}]
    }

    # --- 3. ‡∏î‡∏∂‡∏á‡∏Ñ‡∏ß‡∏≤‡∏°‡∏à‡∏≥‡∏£‡∏∞‡∏¢‡∏∞‡∏™‡∏±‡πâ‡∏ô (‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡πÅ‡∏ä‡∏ó) ---
    history = []
    context_from_db = get_session(user_id)
    if context_from_db:
        try:
            saved_msgs = json.loads(context_from_db) if isinstance(context_from_db, str) else context_from_db
            for msg in saved_msgs:
                if isinstance(msg, dict) and "role" in msg and "parts" in msg:
                    history.append(msg)
        except (json.JSONDecodeError, TypeError) as e:
            print(f"Session load error for user {user_id}: {e}. Starting new session.")
    
    history.append({"role": "user", "parts": [{"text": user_text}]})

    # --- 4. ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å Gemini API ---
    url = f"https://generativelanguage.googleapis.com/v1beta/models/{MODEL_NAME}:generateContent?key={GEMINI_API_KEY}"
    headers = {"Content-Type": "application/json"}
    data = {"contents": history, "systemInstruction": system_instruction, "generationConfig": {"temperature": 0.8, "maxOutputTokens": 2048}}

    try:
        response = requests.post(url, headers=headers, json=data, timeout=30)
        response.raise_for_status()
        result = response.json()

        reply_text = "‡∏Ç‡∏≠‡∏≠‡∏†‡∏±‡∏¢‡∏Ñ‡πà‡∏∞ ‡∏°‡∏µ‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö"
        if 'candidates' in result and result['candidates'] and 'content' in result['candidates'][0] and 'parts' in result['candidates'][0]['content']:
            reply_text = result['candidates'][0]['content']['parts'][0].get('text', reply_text)

        # --- 5. ‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏û‡∏¥‡πÄ‡∏®‡∏©‡∏à‡∏≤‡∏Å AI ---
        clean_reply = reply_text

        # ‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö‡πÅ‡∏•‡∏∞‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏• [SAVE_PROFILE]
        if '[SAVE_PROFILE:' in reply_text:
            command_str = reply_text.split('[SAVE_PROFILE:')[1].split(']')[0]
            try:
                data_to_save = json.loads(command_str)
                update_user_profile(user_id, data_to_save)
                print(f"SUCCESS: Profile updated for {user_id} with {data_to_save}")
                clean_reply = reply_text.split('[SAVE_PROFILE:')[0].strip()
            except Exception as e:
                print(f"ERROR: Could not parse [SAVE_PROFILE] command. Data: {command_str}, Error: {e}")

        # ‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö‡πÅ‡∏•‡∏∞‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏• [SET_REMINDER]
        if '[SET_REMINDER:' in reply_text:
            command_str = reply_text.split('[SET_REMINDER:')[1].split(']')[0]
            try:
                reminder_data = json.loads(command_str)
                notify_dt_naive = datetime.strptime(reminder_data["time"], "%Y-%m-%d %H:%M:%S")
                notify_dt_aware = bangkok_tz.localize(notify_dt_naive)
                create_reminder(user_id, reminder_data["message"], notify_dt_aware)
                print(f"SUCCESS: Reminder set for {user_id} at {notify_dt_aware}")
                clean_reply = reply_text.split('[SET_REMINDER:')[0].strip()
            except Exception as e:
                print(f"ERROR: Could not parse [SET_REMINDER] command. Data: {command_str}, Error: {e}")

        # --- 6. ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÅ‡∏•‡∏∞‡∏™‡πà‡∏á‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö ---
        history.append({"role": "model", "parts": [{"text": clean_reply}]})
        save_session(user_id, json.dumps(history[-8:], ensure_ascii=False))
        
        return clean_reply + " " + random.choice(emotions)

    except requests.exceptions.RequestException as req_err:
        print(f"Request error occurred: {req_err}\n{traceback.format_exc()}")
        return "‡∏Ç‡∏≠‡∏≠‡∏†‡∏±‡∏¢‡∏Ñ‡πà‡∏∞ ‡∏°‡∏µ‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏Å‡∏±‡∏ö AI ‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏ô‡∏∞‡∏Ñ‡∏∞"
    except Exception as e:
        print(f"An unexpected error occurred in ask_gemini: {e}\n{traceback.format_exc()}")
        return "‡∏Ç‡∏≠‡πÇ‡∏ó‡∏©‡∏Ñ‡πà‡∏∞ ‡∏£‡∏∞‡∏ö‡∏ö‡∏Ç‡∏±‡∏î‡∏Ç‡πâ‡∏≠‡∏á ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏î‡πâ‡πÉ‡∏ô‡∏Ç‡∏ì‡∏∞‡∏ô‡∏µ‡πâ"

@handler.add(MessageEvent, message=TextMessage)
def handle_text(event):
    user_id = event.source.user_id
    user_text = event.message.text.strip()

    if user_text.lower() in ["/reset", "‡∏•‡πâ‡∏≤‡∏á‡∏Ñ‡∏ß‡∏≤‡∏°‡∏à‡∏≥", "reset", "clear"]:
        clear_session(user_id) # ‡∏ï‡∏≠‡∏ô‡∏ô‡∏µ‡πâ‡∏à‡∏∞‡∏•‡πâ‡∏≤‡∏á‡πÅ‡∏Ñ‡πà session chat
        line_bot_api.reply_message(
            event.reply_token,
            TextSendMessage(text="üß† ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏à‡∏≥‡∏£‡∏∞‡∏¢‡∏∞‡∏™‡∏±‡πâ‡∏ô (‡∏ö‡∏ó‡∏™‡∏ô‡∏ó‡∏ô‡∏≤) ‡∏ñ‡∏π‡∏Å‡∏•‡πâ‡∏≤‡∏á‡πÅ‡∏•‡πâ‡∏ß‡∏Ñ‡πà‡∏∞ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Ñ‡∏∏‡∏¢‡πÉ‡∏´‡∏°‡πà‡πÑ‡∏î‡πâ‡πÄ‡∏•‡∏¢!")
        )
        return

    reply_text = ask_gemini(user_id, user_text)
    save_chat(user_id, user_text, reply_text)
    line_bot_api.reply_message(event.reply_token, TextSendMessage(text=reply_text))

@app.route("/callback", methods=["POST"])
def callback():
    signature = request.headers.get("X-Line-Signature", "")
    body = request.get_data(as_text=True)
    try:
        handler.handle(body, signature)
    except Exception as e:
        app.logger.error(f"Error handling webhook: {e}")
        return "Bad Request", 400
    return "OK"

@app.route("/")
def dashboard():
    # ‡πÇ‡∏Ñ‡πâ‡∏î‡∏™‡πà‡∏ß‡∏ô Dashboard ‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡πÄ‡∏î‡∏¥‡∏° ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á
    chat_logs = get_chat_history(limit=50)
    daily = get_slip_summary_by_day()
    monthly = get_slip_summary_by_month()
    html = """
    <html>
    <head><title>üí¨ SmartBot Dashboard</title>
        <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
        <style> body { padding: 2rem; } </style>
    </head>
    <body>
        <h1 class="mb-4">üìä LINE SmartBot Dashboard</h1>
        <h2 class="mt-5">üìÜ ‡∏™‡∏£‡∏∏‡∏õ‡∏¢‡∏≠‡∏î‡∏£‡∏≤‡∏¢‡∏ß‡∏±‡∏ô</h2>
        <table class="table table-striped table-hover">
            <thead><tr><th>‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà</th><th>‡∏¢‡∏≠‡∏î‡∏£‡∏ß‡∏°</th></tr></thead>
            <tbody>
                {% for date, total in daily.items() %}
                <tr><td>{{ date }}</td><td>{{ "%.2f"|format(total) }}</td></tr>
                {% endfor %}
            </tbody>
        </table>
        <h2 class="mt-5">üóìÔ∏è ‡∏™‡∏£‡∏∏‡∏õ‡∏¢‡∏≠‡∏î‡∏£‡∏≤‡∏¢‡πÄ‡∏î‡∏∑‡∏≠‡∏ô</h2>
        <table class="table table-striped table-hover">
            <thead><tr><th>‡πÄ‡∏î‡∏∑‡∏≠‡∏ô</th><th>‡∏¢‡∏≠‡∏î‡∏£‡∏ß‡∏°</th></tr></thead>
            <tbody>
                {% for month, total in monthly.items() %}
                <tr><td>{{ month }}</td><td>{{ "%.2f"|format(total) }}</td></tr>
                {% endfor %}
            </tbody>
        </table>
        <h2 class="mt-5">üí¨ ‡πÅ‡∏ä‡∏ó‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î (50 ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°)</h2>
        <table class="table table-sm">
            <thead><tr><th>‡πÄ‡∏ß‡∏•‡∏≤</th><th>User ID</th><th>‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°</th><th>‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö</th></tr></thead>
            <tbody>
            {% for log in chat_logs %}
            <tr><td>{{ log[4].strftime('%Y-%m-%d %H:%M') }}</td><td>{{ log[1] }}</td><td>{{ log[2] }}</td><td>{{ log[3] }}</td></tr>
            {% endfor %}
            </tbody>
        </table>
    </body></html>
    """
    return render_template_string(html, chat_logs=chat_logs, daily=daily, monthly=monthly)

# --- ‡πÄ‡∏û‡∏¥‡πà‡∏° Endpoint ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Keep-alive ---
@app.route("/ping")
def ping():
    """Endpoint ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÉ‡∏´‡πâ Cron Job ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏õ‡∏•‡∏∏‡∏Å‡πÅ‡∏≠‡∏õ"""
    print("Ping received, keeping app alive.")
    return "OK", 200

# ‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏: ‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ if __name__ == "__main__": ‡∏≠‡∏µ‡∏Å‡∏ï‡πà‡∏≠‡πÑ‡∏õ‡πÄ‡∏°‡∏∑‡πà‡∏≠ deploy ‡∏ö‡∏ô gunicorn